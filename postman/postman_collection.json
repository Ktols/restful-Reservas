{
	"info": {
		"_postman_id": "9ee4517c-c62f-4a04-8805-c4b6eddfe383",
		"name": "RESTFUL_BOOKER_AUTOMATE",
		"description": "StartFragment\n\n# **Plan de Pruebas para la API RestFul Booker**\n\n## **1\\. Introducción**\n\n### **1.1. Objetivo del Plan de Pruebas**\n\nDefinir el enfoque y la estrategia para la automatización de pruebas de la API RestFul Booker, con el objetivo de detectar errores en una etapa temprana del desarrollo.\n\n## **2\\. Alcance de las Pruebas**\n\n- **Creación de Pruebas para los Endpoints:** Auth, Booking y Ping.\n    \n- **Automatización de endpoints:** Auth, Booking y Ping.\n    \n- **Implementación de pruebas para métodos HTTP:** POST, GET, PUT, PATCH, DELETE.\n    \n- **Configuración de pipeline de integración continua.**\n    \n\n## **3\\. Estrategia de Pruebas**\n\n### **3.1. Niveles de Prueba**\n\n- **Pruebas de Integración:** Verificación de la interacción entre los diferentes endpoints.\n    \n- **Pruebas de API:** Validación de contratos y respuestas de servicios.\n    \n- **Pruebas de Regresión:** Ejecución automatizada en el pipeline de CI (GitHub Actions).\n    \n\n### **3.2. Tipos de Prueba**\n\n#### **3.2.1. Pruebas Funcionales**\n\n- Validación de respuestas HTTP.\n    \n- Verificación de estructura de datos.\n    \n- Validación de contrato de API.\n    \n\n#### **3.2.2. Pruebas No Funcionales**\n\n- Validación de tiempos de respuesta.\n    \n- Verificación de headers y tokens.\n    \n- Manejo de errores.\n    \n\n## **4\\. Ambiente de Pruebas**\n\n### **4.1. Herramientas**\n\n- **Postman:** Creación y ejecución de colecciones de pruebas.\n    \n- **Newman:** Ejecución de pruebas en CLI.\n    \n- **GitHub Actions:** Pipeline de CI.\n    \n- **Visual Studio Code:** Edición de scripts y configuraciones.\n    \n\n### **4.2. Configuración de Ambiente**\n\n_Configurar el entorno de Postman para pruebas automatizadas y manuales._\n\n## **5\\. Casos de Prueba**\n\n### **5.1. Auth**\n\n#### **5.1.1. Happy Paths**\n\n- Generación exitosa de token.\n    \n- Validación de formato de token.\n    \n\n#### **5.1.2. Unhappy Paths**\n\n- Credenciales inválidas.\n    \n- Formato de request inválido.\n    \n- Campos faltantes.\n    \n\n### **5.2. Booking**\n\n#### **5.2.1. Happy Paths**\n\n- Crear reserva válida.\n    \n- Consultar reserva existente.\n    \n- Actualizar reserva existente.\n    \n- Eliminar reserva existente.\n    \n\n#### **5.2.2. Unhappy Paths**\n\n- Crear reserva con datos inválidos.\n    \n- Consultar reserva inexistente.\n    \n- Actualizar sin autorización.\n    \n- Eliminar sin autorización.\n    \n\n### **5.3. Ping**\n\n#### **5.3.1. Happy Paths**\n\n- Verificar disponibilidad del servicio.\n    \n\n#### **5.3.2. Unhappy Paths**\n\n- Manejo de timeout.\n    \n\n## **6\\. Gestión de Datos**\n\n### **6.1. Datos de Prueba**\n\n- Uso de variables de ambiente en Postman.\n    \n- Generación dinámica de datos para pruebas.\n    \n- Limpieza de datos post-ejecución.\n    \n\n### **6.2. Pre-requisitos**\n\n- Token de autenticación válido.\n    \n- IDs de reservas existentes.\n    \n- Datos de prueba preparados.\n    \n\n## **7\\. Ejecución de Pruebas**\n\n### **7.1. Flujo de Trabajo**\n\n- Ejecución local durante desarrollo.\n    \n- Ejecución automatizada en PR.\n    \n- Ejecución programada cada 6 horas.\n    \n\n### **7.2. Criterios de Éxito**\n\n- 100% de casos críticos exitosos.\n    \n- Cobertura mínima de 90% de endpoints.\n    \n- Tiempo máximo de ejecución: 5 minutos.\n    \n\n## **8\\. Reportes**\n\n### **8.1. Tipos de Reportes**\n\n- Reporte de ejecución en CLI.\n    \n- Reporte HTML detallado.\n    \n- Reporte JUnit para integración con CI.\n    \n\n### **8.2. Métricas**\n\n- Tasa de éxito/fallo.\n    \n- Tiempo de ejecución.\n    \n- Cobertura de pruebas.\n    \n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4261072",
		"_collection_link": "https://bold-rocket-222825.postman.co/workspace/Prueba~6e2ca7a9-8226-4f45-9971-34868edfd53d/collection/4261072-9ee4517c-c62f-4a04-8805-c4b6eddfe383?action=share&source=collection_link&creator=4261072"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Verificar Autenticacion de usuario",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar el  que objeto y que contiene una propiedad llamada token\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada token\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('token');\r",
											"});\r",
											"\r",
											"// Verificar que la respuesta sea 200\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verificar que el tiempo de respuesta sea inferior a 1000 ms\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//SCRIPT PARA GUARDAR EL TOKEN Y USAR EN OTROS ENDPOINTS\r",
											"// Obtiene el token de la respuesta JSON\r",
											"var jsonData = pm.response.json();\r",
											"// Guarda el token en una variable de colección\r",
											"pm.collectionVariables.set(\"token\", jsonData.token);\r",
											"// Opcional: imprime un mensaje en la consola\r",
											"console.log(\"Token guardado en variable de colección:\", jsonData.token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Paths",
					"item": [
						{
							"name": "Verificar Autenticacion de usuario con credenciales invalidas",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar el  que objeto y que contiene una propiedad llamada reason\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('reason');\r",
											"});\r",
											"\r",
											"// Verificar que la respuesta sea 200\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verificar que el tiempo de respuesta sea inferior a 1000 ms\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\" : \"test\",\r\n    \"password\" : \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con formato de request invalido",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar el  que objeto y que contiene una propiedad llamada reason\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('reason');\r",
											"});\r",
											"\r",
											"// Verificar que la respuesta sea 200\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verificar que el tiempo de respuesta sea inferior a 1000 ms\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"// Obtiene el token de la respuesta JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Guarda el token en una variable de colección\r",
											"pm.collectionVariables.set(\"token\", jsonData.token);\r",
											"\r",
											"// Opcional: imprime un mensaje en la consola\r",
											"console.log(\"Token guardado en variable de colección:\", jsonData.token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": 123,\r\n    \"password\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con nombres incorrectos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verificar el  que objeto y que contiene una propiedad llamada reason\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('reason');\r",
											"});\r",
											"\r",
											"// Verificar que la respuesta sea 200\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Verificar que el tiempo de respuesta sea inferior a 1000 ms\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"// Obtiene el token de la respuesta JSON\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Guarda el token en una variable de colección\r",
											"pm.collectionVariables.set(\"token\", jsonData.token);\r",
											"\r",
											"// Opcional: imprime un mensaje en la consola\r",
											"console.log(\"Token guardado en variable de colección:\", jsonData.token);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"admin\",\r\n    \"pwd\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con JSON mal formado (falta coma)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada Bad Request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Bad Request');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\"\r\n    \"password\": \"password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con Array en lugar de objeto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('reason');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Verificar que el Status code name sea OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    \"username\",\r\n    \"password\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con Campos vacíos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('reason');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Verificar que el Status code name sea OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con Campos con valores null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('reason');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el Status code name sea OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": null,\r\n    \"password\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con espacios en blanco",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('reason');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el Status code name sea OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"    \",\r\n    \"password\": \"    \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con objeto vacio",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada reason\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('reason');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el Status code name sea OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con campos adicionales (ISSUE)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('token');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el Status code name sea OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\",\r\n    \"extraField\": \"value\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Autenticacion de usuario con Caracteres especiales no permitidos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax and removed unnecessary tests\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada Bad Request\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Bad Request');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta sea 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el Status code name sea Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\\n\\t\",\r\n    \"password\": \"password123\\0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Verificar creación básica de reserva",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta es un objeto con propiedad bookingid\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('bookingid');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    var booking = pm.response.json().booking;\r",
											"    pm.expect(booking).to.have.property('firstname');\r",
											"    pm.expect(booking).to.have.property('lastname');\r",
											"    pm.expect(booking).to.have.property('totalprice');\r",
											"    pm.expect(booking).to.have.property('depositpaid');\r",
											"    pm.expect(booking).to.have.property('bookingdates');\r",
											"    pm.expect(booking).to.have.property('additionalneeds');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad bookingdates  tenga checkin y checkout \", function () {\r",
											"    var bookingdates = pm.response.json().booking.bookingdates;\r",
											"    pm.expect(bookingdates).to.have.property('checkin');\r",
											"    pm.expect(bookingdates).to.have.property('checkout');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"// Parsea la respuesta JSON\r",
											"const responseData = pm.response.json();\r",
											"// Almacena el valor del campo \"id\" en la variable de colección \"bookingid\"\r",
											"pm.collectionVariables.set(\"bookingid\", responseData.bookingid);\r",
											"\r",
											"\r",
											"// Obtiene el objeto JSON completo de la respuesta\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// Extrae el valor del 'firstname' y lo guarda en una variable de colección\r",
											"pm.collectionVariables.set(\"firstnameCreated\", jsonData.booking.firstname);\r",
											"\r",
											"// Opcional: imprime el nombre en la consola\r",
											"console.log(\"First name guardado en variable de colección:\", jsonData.booking.firstname);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalpriceInt}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación básica de reserva con precio con decimales",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta es un objeto con propiedad bookingid\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('bookingid');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    var booking = pm.response.json().booking;\r",
											"    pm.expect(booking).to.have.property('firstname');\r",
											"    pm.expect(booking).to.have.property('lastname');\r",
											"    pm.expect(booking).to.have.property('totalprice');\r",
											"    pm.expect(booking).to.have.property('depositpaid');\r",
											"    pm.expect(booking).to.have.property('bookingdates');\r",
											"    pm.expect(booking).to.have.property('additionalneeds');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad bookingdates  tenga checkin y checkout \", function () {\r",
											"    var bookingdates = pm.response.json().booking.bookingdates;\r",
											"    pm.expect(bookingdates).to.have.property('checkin');\r",
											"    pm.expect(bookingdates).to.have.property('checkout');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación básica de reserva sin additionalneeds (campo opcional)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta es un objeto con propiedad bookingid\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('bookingid');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid y bookingdates\", function () {\r",
											"    var booking = pm.response.json().booking;\r",
											"    pm.expect(booking).to.have.property('firstname');\r",
											"    pm.expect(booking).to.have.property('lastname');\r",
											"    pm.expect(booking).to.have.property('totalprice');\r",
											"    pm.expect(booking).to.have.property('depositpaid');\r",
											"    pm.expect(booking).to.have.property('bookingdates');   \r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad bookingdates  tenga checkin y checkout \", function () {\r",
											"    var bookingdates = pm.response.json().booking.bookingdates;\r",
											"    pm.expect(bookingdates).to.have.property('checkin');\r",
											"    pm.expect(bookingdates).to.have.property('checkout');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											"// Parsea la respuesta JSON\r",
											"const responseData = pm.response.json();\r",
											"// Almacena el valor del campo \"id\" en la variable de colección \"bookingid\"\r",
											"pm.collectionVariables.set(\"bookingidNoAdditionalneeds\", responseData.bookingid);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    }\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar consulta de reserva recién creada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.firstname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.lastname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.totalprice).to.be.a('number');\r",
											"    pm.expect(response.depositpaid).to.be.a('boolean');\r",
											"    pm.expect(response.bookingdates).to.be.an('object');\r",
											"    pm.expect(response.bookingdates.checkin).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(response.bookingdates.checkout).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Consulta de reserva sin additionalneeds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"Verificarque el nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.firstname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.lastname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.totalprice).to.be.a('number');\r",
											"    pm.expect(response.depositpaid).to.be.a('boolean');\r",
											"    pm.expect(response.bookingdates).to.be.an('object');\r",
											"    pm.expect(response.bookingdates.checkin).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(response.bookingdates.checkout).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que no se encuentre la propiedad Additionalneeds\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.satisfy((booking) => {\r",
											"        return !booking.hasOwnProperty('additionalneeds') || booking.additionalneeds === null;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingidNoAdditionalneeds}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingidNoAdditionalneeds}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar consulta de todas las reservas (sin filtros)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Respuesta contiene bookings\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar consulta reservas Filtrando por firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?firstname{{firstnameCreated}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "firstname{{firstnameCreated}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización de reserva con datos válidos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.firstname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.lastname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.totalprice).to.be.a('number');\r",
											"    pm.expect(response.depositpaid).to.be.a('boolean');\r",
											"    pm.expect(response.bookingdates).to.be.an('object');\r",
											"    pm.expect(response.bookingdates.checkin).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(response.bookingdates.checkout).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    \r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalpriceInt}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización de reserva sin campo opcional additionalneeds",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.firstname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.lastname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.totalprice).to.be.a('number');\r",
											"    pm.expect(response.depositpaid).to.be.a('boolean');\r",
											"    pm.expect(response.bookingdates).to.be.an('object');\r",
											"    pm.expect(response.bookingdates.checkin).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(response.bookingdates.checkout).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalpriceInt}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    }  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización Parcial de reserva de nombre y apellido del cliente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.firstname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.lastname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.totalprice).to.be.a('number');\r",
											"    pm.expect(response.depositpaid).to.be.a('boolean');\r",
											"    pm.expect(response.bookingdates).to.be.an('object');\r",
											"    pm.expect(response.bookingdates.checkin).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(response.bookingdates.checkout).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Emmanuel\",\r\n    \"lastname\" : \"Salazar\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización Parcial de reserva de nombre y precio total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    const response = pm.response.json();\r",
											"    \r",
											"    pm.expect(response).to.be.an('object');\r",
											"    pm.expect(response.firstname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.lastname).to.be.a('string').and.to.not.be.empty;\r",
											"    pm.expect(response.totalprice).to.be.a('number');\r",
											"    pm.expect(response.depositpaid).to.be.a('boolean');\r",
											"    pm.expect(response.bookingdates).to.be.an('object');\r",
											"    pm.expect(response.bookingdates.checkin).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"    pm.expect(response.bookingdates.checkout).to.be.a('string').and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Alice\",\r\n    \"totalprice\": 200\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Eliminación de una reserva existente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Paths",
					"item": [
						{
							"name": "Verificar creación de reserva con tipos de datos inválidos (ISSUE)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": {{$randomInt}},\r\n    \"lastname\": true,\r\n    \"totalprice\": \"{{$randomInt}}\",\r\n    \"depositpaid\": \"true\",\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-01-01\",\r\n        \"checkout\": \"2024-01-05\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación de reserva con fechas inválidas",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('bookingid');\r",
											"    pm.expect(responseData).to.have.property('booking');\r",
											"    \r",
											"    const bookingData = responseData.booking;\r",
											"    pm.expect(bookingData).to.be.an('object');\r",
											"    pm.expect(bookingData).to.have.property('firstname');\r",
											"    pm.expect(bookingData).to.have.property('lastname');\r",
											"    pm.expect(bookingData).to.have.property('totalprice');\r",
											"    pm.expect(bookingData).to.have.property('depositpaid');\r",
											"    \r",
											"    const bookingDates = bookingData.bookingdates;\r",
											"    pm.expect(bookingDates).to.be.an('object');\r",
											"    pm.expect(bookingDates).to.have.property('checkin');\r",
											"    pm.expect(bookingDates).to.have.property('checkout');\r",
											"});\r",
											"\r",
											"pm.test(\"Total price is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.booking.totalprice).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Deposit paid should be a boolean value\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.booking.depositpaid).to.be.a('boolean');\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalpriceInt}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-13-01\",\r\n        \"checkout\": \"2024-01-32\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación de reserva con Checkout antes que Checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.eql(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has required fields: bookingid and booking\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('bookingid');\r",
											"    pm.expect(responseData).to.have.property('booking');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the booking object schema\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('bookingid', 'booking');\r",
											"    pm.expect(responseData.booking).to.be.an('object');\r",
											"    \r",
											"    pm.expect(responseData.booking).to.have.all.keys('firstname', 'lastname', 'totalprice', 'depositpaid', 'bookingdates');\r",
											"    pm.expect(responseData.booking.firstname).to.be.a('string');\r",
											"    pm.expect(responseData.booking.lastname).to.be.a('string');\r",
											"    pm.expect(responseData.booking.totalprice).to.be.a('number');\r",
											"    pm.expect(responseData.booking.depositpaid).to.be.a('boolean');\r",
											"    \r",
											"    pm.expect(responseData.booking.bookingdates).to.be.an('object');\r",
											"    pm.expect(responseData.booking.bookingdates).to.have.all.keys('checkin', 'checkout');\r",
											"    pm.expect(responseData.booking.bookingdates.checkin).to.be.a('string');\r",
											"    pm.expect(responseData.booking.bookingdates.checkout).to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Firstname and lastname must be non-empty strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.booking).to.exist;\r",
											"\r",
											"    pm.expect(responseData.booking.firstname).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Firstname should not be empty\");\r",
											"    pm.expect(responseData.booking.lastname).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalpriceInt}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-01-05\",\r\n        \"checkout\": \"2024-01-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación de reserva con campos faltantes requeridos (ISSUE)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verificar que codigo de respuesta sea 400\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 10000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"depositpaid\" : true\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación de reserva con precio negativo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('bookingid', 'booking');\r",
											"    pm.expect(responseData.booking).to.have.all.keys('firstname', 'lastname', 'totalprice', 'depositpaid', 'bookingdates', 'additionalneeds');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Bookingdates object contains valid checkin and checkout dates\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.booking).to.have.property('bookingdates').that.is.an('object');\r",
											"    pm.expect(responseData.booking.bookingdates).to.have.property('checkin').that.is.a('string').and.to.not.be.empty;\r",
											"    pm.expect(responseData.booking.bookingdates).to.have.property('checkout').that.is.a('string').and.to.not.be.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\": -111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación de reserva con Strings vacíos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response content type is JSON\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the booking object schema\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('bookingid').that.is.a('number');\r",
											"    \r",
											"    pm.expect(responseData).to.have.property('booking').that.is.an('object');\r",
											"    \r",
											"    const booking = responseData.booking;\r",
											"    pm.expect(booking).to.have.all.keys('firstname', 'lastname', 'totalprice', 'depositpaid', 'bookingdates', 'additionalneeds');\r",
											"    \r",
											"    pm.expect(booking.firstname).to.be.a('string');\r",
											"    pm.expect(booking.lastname).to.be.a('string');\r",
											"    pm.expect(booking.totalprice).to.be.a('number');\r",
											"    pm.expect(booking.depositpaid).to.be.a('boolean');\r",
											"    \r",
											"    pm.expect(booking.bookingdates).to.be.an('object');\r",
											"    pm.expect(booking.bookingdates).to.have.all.keys('checkin', 'checkout');\r",
											"    pm.expect(booking.bookingdates.checkin).to.be.a('string');\r",
											"    pm.expect(booking.bookingdates.checkout).to.be.a('string');\r",
											"    \r",
											"    pm.expect(booking.additionalneeds).to.be.a('string');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Booking ID is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.bookingid).to.exist;\r",
											"    pm.expect(responseData.bookingid).to.be.a('number').that.is.at.least(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\" : \"\",\r\n    \"totalprice\": -111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar creación de reserva con formato de fecha incorrecto (Parse fecha)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFullName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"additionalneeds\", pm.variables.replaceIn('{{$randomAdjective}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la respuesta es un objeto con propiedad bookingid\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('bookingid');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad booking tenga firstname, lastname, totalprice, depositpaid, bookingdates y additionalneeds\", function () {\r",
											"    var booking = pm.response.json().booking;\r",
											"    pm.expect(booking).to.have.property('firstname');\r",
											"    pm.expect(booking).to.have.property('lastname');\r",
											"    pm.expect(booking).to.have.property('totalprice');\r",
											"    pm.expect(booking).to.have.property('depositpaid');\r",
											"    pm.expect(booking).to.have.property('bookingdates');\r",
											"    pm.expect(booking).to.have.property('additionalneeds');\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que la propiedad bookingdates  tenga checkin y checkout \", function () {\r",
											"    var bookingdates = pm.response.json().booking.bookingdates;\r",
											"    pm.expect(bookingdates).to.have.property('checkin');\r",
											"    pm.expect(bookingdates).to.have.property('checkout');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0a1c774267dee90",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalpriceInt}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\": \"01-01-2024\",\r\n        \"checkout\": \"05-01-2024\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Consulta de reserva con  ID de reserva inexistente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"nonExistentId\", \"999999\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada Not Found\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Not Found');\r",
											"}); \r",
											"pm.test(\"Verificar que codigo de respuesta sea 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{nonExistentId}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{nonExistentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Consulta de reserva con  ID de reserva inválido (no numérico)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"invalidId\", \"abc\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada Not Found\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Not Found');\r",
											"}); \r",
											"pm.test(\"Verificar que codigo de respuesta sea 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{invalidId}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Consulta de reserva con  ID de reserva negativo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"negativeId\", \"-1\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada Not Found\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Not Found');\r",
											"}); \r",
											"pm.test(\"Verificar que codigo de respuesta sea 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{invalidId}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar consulta reservas con Formato de fecha inválido (ISSUE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking?checkin=2024/01/01",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking"
									],
									"query": [
										{
											"key": "checkin",
											"value": "2024/01/01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización de reserva  sin autorización",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 200\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalpriceInt}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    }  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización de reserva con tipos de datos no válidos (ISSUE)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"firstname\", pm.variables.replaceIn('{{$randomFirstName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"lastname\", pm.variables.replaceIn('{{$randomLastName}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalprice\", pm.variables.replaceIn('{{$randomPrice}}').toUpperCase());\r",
											"pm.collectionVariables.set(\"totalpriceInt\", pm.variables.replaceIn('{{$randomInt}}').toUpperCase());\r",
											"\r",
											"// Función para obtener fechas aleatorias de inicio y fin en formato \"YYYY-MM-DD\"\r",
											"function getRandomDates() {\r",
											"    const start = new Date(2024, 0, 1); // 1 de enero de 2018\r",
											"    const end = new Date(); // Fecha actual\r",
											"\r",
											"    // Calcula dos tiempos aleatorios entre la fecha de inicio y fin\r",
											"    const randomTimeStart = start.getTime() + Math.random() * (end.getTime() - start.getTime());\r",
											"    const randomTimeEnd = randomTimeStart + Math.random() * (end.getTime() - randomTimeStart);\r",
											"\r",
											"    // Crea dos nuevas fechas con los tiempos aleatorios\r",
											"    const randomStartDate = new Date(randomTimeStart);\r",
											"    const randomEndDate = new Date(randomTimeEnd);\r",
											"\r",
											"    // Formatea las fechas como \"YYYY-MM-DD\"\r",
											"    const format = date => {\r",
											"        const year = date.getFullYear();\r",
											"        const month = String(date.getMonth() + 1).padStart(2, '0'); // Ajusta el mes para tener dos dígitos\r",
											"        const day = String(date.getDate()).padStart(2, '0'); // Ajusta el día para tener dos dígitos\r",
											"        return `${year}-${month}-${day}`;\r",
											"    };\r",
											"\r",
											"    return {\r",
											"        startDate: format(randomStartDate),\r",
											"        endDate: format(randomEndDate)\r",
											"    };\r",
											"}\r",
											"\r",
											"// Almacena el resultado de la función getRandomDates en variables de colección\r",
											"const randomDates = getRandomDates();\r",
											"pm.collectionVariables.set('startDate', randomDates.startDate);\r",
											"pm.collectionVariables.set('endDate', randomDates.endDate);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 400 o 422\", function () {\r",
											"  pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena OK\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : 12345,  // Error: Debe ser string\r\n    \"totalprice\" : \"abc\",  // Error: Debe ser número\r\n    \"depositpaid\" : \"true\",  // Error: Debe ser booleano\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{startDate}}\",\r\n        \"checkout\" : \"{{endDate}}\"\r\n    }  \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización Parcial de reserva de un ID de reserva que no existente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada Method Not Allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Method Not Allowed');\r",
											"}); \r",
											"pm.test(\"Verificar que codigo de respuesta sea 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"Alice\",\r\n    \"totalprice\": 200\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{invalidId}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar actualización Parcial de reserva con datos inválidos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Verificar el  que objeto y que contiene una propiedad llamada Method Not Allowed\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Method Not Allowed');\r",
											"}); \r",
											"pm.test(\"Verificar que codigo de respuesta sea 405 \", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"totalprice\": \"cien\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{bookingid}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Eliminación de reserva con ID de reserva no existente",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Method Not Allowed\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/{{invalidId}}",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										"{{invalidId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verificar Eliminación de reserva sin ID de reserva",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"// EJECUTAMOS EN ENDPONT AUTH para luego obtener el token y luego almacenar en una variable de colección y utilizarlo en este mismo endpoint\r",
											"pm.sendRequest({\r",
											"    url: 'https://restful-booker.herokuapp.com/auth',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": \"admin\",\r",
											"            \"password\": \"password123\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error en la solicitud de autenticación:\", err);\r",
											"    } else {\r",
											"        var jsonData = res.json();\r",
											"        // Guardar el token en una variable de colección\r",
											"        pm.collectionVariables.set(\"authToken\", jsonData.token);\r",
											"        console.log(\"Token obtenido y guardado:\", jsonData.token);\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que codigo de respuesta sea 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//El nombre del código de estado tiene una cadena OK\r",
											"pm.test(\"El nombre del código de estado tiene una cadena Not Found\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Cookie",
										"value": "token={{authToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/booking/",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"booking",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "Happy Path",
					"item": [
						{
							"name": "Verificación de disponibilidad del servidor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que el estado sea 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Verificar que la respuesta sea Created\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/ping",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Paths",
					"item": [
						{
							"name": "Verificación de Ping al servidor incorrecto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verificar que el estado sea 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Verificar que el tiempo de respuesta sea inferior a 1000 ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://restful-booker.herokuapp.com/ping/invalid",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"ping",
										"invalid"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "totalprice",
			"value": ""
		},
		{
			"key": "additionalneeds",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "bookingid",
			"value": ""
		},
		{
			"key": "totalpriceDecimal",
			"value": ""
		},
		{
			"key": "totalpriceInt",
			"value": ""
		},
		{
			"key": "bookingidNoAdditionalneeds",
			"value": ""
		},
		{
			"key": "nonExistentId",
			"value": ""
		},
		{
			"key": "invalidId",
			"value": ""
		},
		{
			"key": "negativeId",
			"value": ""
		},
		{
			"key": "firstnameCreated",
			"value": ""
		},
		{
			"key": "authToken",
			"value": ""
		}
	]
}