{
	"info": {
		"_postman_id": "2d59993a-085b-4343-a55a-829d7c96bf3d",
		"name": "API - restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4261072",
		"_collection_link": "https://bold-rocket-222825.postman.co/workspace/MODELO-DE-AUTOMATIZACI%C3%93N-DE-PRU~938e62b9-7aec-47d0-aff2-90dcaba7989f/collection/4261072-2d59993a-085b-4343-a55a-829d7c96bf3d?action=share&source=collection_link&creator=4261072"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth - CreateToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"",
									"pm.collectionVariables.set('token', responseData.token)",
									"",
									"pm.test('Response status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Response has the required field - token', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.exist;",
									"})",
									"",
									"pm.test('Token is a non-empty string', function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Token should not be empty');",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test(\"Request payload includes the keys 'username' and 'password'\", function () {",
									"    const requestBody = pm.request.body.raw;",
									"",
									"    pm.expect(requestBody).to.include('\"username\"').and.to.include('\"password\"');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}"
						},
						"url": {
							"raw": "{{URI}}/auth",
							"host": [
								"{{URI}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "\nThis endpoint makes an HTTP POST request to {{URI}}/auth to authenticate the user. The request should include a payload in raw JSON format with the keys \"username\" and \"password\". Upon a successful execution, the response will have a status code of 200 and a content type of application/json, with a JSON object containing a \"token\" as the response data.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "CrearReserva",
					"item": [
						{
							"name": "CREAR RESERVA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed variable name from bookingid to bookingId",
											"var bookingId = pm.response.json().bookingid;",
											"pm.collectionVariables.set(\"bookingid\", bookingId);",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Booking ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.bookingid).to.be.a('number').and.to.be.at.least(0, 'Booking ID should be a non-negative integer');",
											"});",
											"",
											"",
											"pm.test(\"Firstname and lastname must be non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.booking.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    pm.expect(responseData.booking.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Total price must be a non-negative number\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.booking.totalprice).to.be.a('number').and.to.be.at.least(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Clara\",\r\n    \"lastname\" : \"Samaniego\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}"
								},
								"url": {
									"raw": "{{URI}}/booking",
									"host": [
										"{{URI}}"
									],
									"path": [
										"booking"
									]
								},
								"description": "\n### Create a Booking\n\nThis endpoint allows you to create a new booking.\n\n#### Request Body\n- `firstname` (string, required): The first name of the guest.\n- `lastname` (string, required): The last name of the guest.\n- `totalprice` (number, required): The total price of the booking.\n- `depositpaid` (boolean, required): Indicates if the deposit has been paid.\n- `bookingdates` (object, required): The check-in and check-out dates for the booking.\n  - `checkin` (string, required): The check-in date.\n  - `checkout` (string, required): The check-out date.\n- `additionalneeds` (string, optional): Any additional needs or requests for the booking.\n\n#### Response\nUpon successful creation, the endpoint returns a status code of 200 and a JSON object containing the `bookingid` and the details of the newly created `booking`.\n\nExample:\n```json\n{\n    \"bookingid\": 0,\n    \"booking\": {\n        \"firstname\": \"\",\n        \"lastname\": \"\",\n        \"totalprice\": 0,\n        \"depositpaid\": true,\n        \"bookingdates\": {\n            \"checkin\": \"\",\n            \"checkout\": \"\"\n        },\n        \"additionalneeds\": \"\"\n    }\n}\n```\n"
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "ObtenerIdReserva",
					"item": [
						{
							"name": "ObtenerIdReserva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field - bookingid\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (booking) {",
											"    pm.expect(booking).to.have.property('bookingid');",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"bookingid is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  ",
											"  responseData.forEach(function (booking) {",
											"    pm.expect(booking.bookingid).to.be.a('number');",
											"    pm.expect(booking.bookingid).to.be.at.least(0);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URI}}/booking",
									"host": [
										"{{URI}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ObtenerDetalleReserva",
					"item": [
						{
							"name": "ObtenerDetalleReserva",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.firstname).to.exist;",
											"    pm.expect(responseData.lastname).to.exist;",
											"    pm.expect(responseData.totalprice).to.exist;",
											"    pm.expect(responseData.depositpaid).to.exist;",
											"    pm.expect(responseData.bookingdates).to.exist;",
											"    pm.expect(responseData.additionalneeds).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Firstname is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.firstname).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Lastname is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Totalprice is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.totalprice).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.totalprice).to.be.at.least(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{URI}}/booking/{{bookingid}}",
									"host": [
										"{{URI}}"
									],
									"path": [
										"booking",
										"{{bookingid}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ActualizarReserva",
			"item": [
				{
					"name": "ACTUALIZAR RESERVA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the firstname field is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the lastname field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Total price is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.totalprice).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate the depositpaid field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.depositpaid).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"prueba1\",\r\n    \"lastname\": \"prueba3\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-01-17\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URI}}/booking/{{bookingid}}",
							"host": [
								"{{URI}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ActualizaciónParcialReserva",
			"item": [
				{
					"name": "ActualizaciónParcialReserva",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    ",
									"    pm.expect(responseData).to.have.property('firstname');",
									"    pm.expect(responseData).to.have.property('lastname');",
									"    pm.expect(responseData).to.have.property('totalprice');",
									"    pm.expect(responseData).to.have.property('depositpaid');",
									"    pm.expect(responseData).to.have.property('bookingdates');",
									"    pm.expect(responseData).to.have.property('additionalneeds');",
									"});",
									"",
									"",
									"pm.test(\"Firstname is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Lastname is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Totalprice is a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.totalprice).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.totalprice).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"clara Melina\",\r\n    \"lastname\" : \"Brown\"\r\n}"
						},
						"url": {
							"raw": "{{URI}}/booking/{{bookingid}}",
							"host": [
								"{{URI}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "URI",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "bookingid",
			"value": "",
			"type": "string"
		}
	]
}